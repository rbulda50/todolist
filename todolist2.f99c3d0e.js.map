{"mappings":"YACO,IAkBIA,EAAS,W,IAACC,EAAIC,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,G,OAC1BE,OAAOC,gBAAgB,IAAIC,WAAWL,IAAOM,QAAO,SAACC,EAAIC,GAWvD,OARED,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,G,GAGP,G,EC9BCG,EAAO,CACTC,SAAUC,SAASC,cAAc,cACjCC,UAAWF,SAASC,cAAc,eAClCE,cAAeH,SAASC,cAAc,gBAG1CH,EAAKC,SAASK,iBAAiB,UAK/B,SAAoBC,GAChBA,EAAEC,iBAKN,SAAiBC,GACb,GAAIA,EAAM,CACN,IAAMC,EAAO,CAAEd,GAAIR,IAAUuB,MAAOF,EAAMG,MAAM,GAEhDC,EAAMC,KAAKJ,GACXK,EAAkBF,E,EATtBG,CAAQhB,EAAKI,UAAUO,OACvBX,EAAKI,UAAUO,MAAQ,E,IAP3BX,EAAKK,cAAcC,iBAAiB,SAwDpC,SAA4BC,GACF,aAAlBA,EAAEU,OAAOC,OAQDtB,EAPDW,EAAEU,OAAOE,cAAcC,aAAa,WAS/CP,EAAMQ,SAAQ,SAAAZ,GACNb,IAAOa,EAAKb,KACZa,EAAKG,MAAQH,EAAKG,K,IAG1BG,EAAkBF,IAPtB,IAAgBjB,EALRW,EAAEU,OAAOK,UAAUC,SAAS,kBAepC,SAAoB3B,GAOhBmB,EANAF,EAAQA,EAAMW,QAAO,SAAAf,GAEjB,GAAIA,EAAKb,KAAOA,EACZ,OAAOa,EAAKb,E,KAlBhB6B,CAAWlB,EAAEU,OAAOE,cAAcC,aAAa,W,IA3DvD,IA6CUM,EA7CNb,EAAQ,GAiBZ,SAASc,EAAYC,GACjB5B,EAAKK,cAAcwB,UAAY,GAC/BD,EAAMP,SAAQ,SAAAZ,GACd,IAAMqB,EAAUrB,EAAKG,KAAO,UAAY,KAE9BmB,EAAK7B,SAAS8B,cAAc,MAClCD,EAAGE,aAAa,QAAS,QACzBF,EAAGE,aAAa,UAAWxB,EAAKb,KAEd,IAAda,EAAKG,MACLmB,EAAGT,UAAUY,IAAI,WAGrBH,EAAGF,UAAY,0DAETM,OADwCL,EAAQ,oBACrCK,OAAX1B,EAAKE,MAAM,sEAGrBX,EAAKK,cAAc+B,OAAOL,E,IAI9B,SAAShB,EAAkBsB,GACvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,IAC7CV,EAAYU,E,EAINX,EAAOY,aAAaI,QAAQ,WAG9Bf,EADAd,EAAQ2B,KAAKG,MAAMjB,G","sources":["node_modules/nanoid/index.browser.js","src/js/todolist2.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from \"nanoid\";\n\nconst refs = {\n    todoForm: document.querySelector('.todo-form'),\n    todoInput: document.querySelector('.todo-input'),\n    todoListItems: document.querySelector('.todo-items'),\n};\n\nrefs.todoForm.addEventListener('submit', submitForm);\nrefs.todoListItems.addEventListener('click', toggleOrDeleteTask);\n\nlet tasks = [];\n\nfunction submitForm(e) {\n    e.preventDefault();\n    addTodo(refs.todoInput.value);\n    refs.todoInput.value = '';\n};\n\nfunction addTodo(item) {\n    if (item) {\n        const task = { id: nanoid(), value: item, done: false };\n\n        tasks.push(task);\n        addToLocalStorage(tasks);\n    };\n};\n\nfunction renderTasks(tasks) {\n    refs.todoListItems.innerHTML = '';\n    tasks.forEach(item => { \n    const checked = item.done ? 'checked' : null;\n    \n        const li = document.createElement('li');\n        li.setAttribute('class', 'item');\n        li.setAttribute('data-id', item.id);\n\n        if (item.done === true) { \n            li.classList.add('checked'); \n        };\n\n        li.innerHTML = ` \n            <input type=\"checkbox\" class=\"checkbox\" ${checked}> \n            ${item.value} \n            <button class=\"delete-button\">X</button> \n        `; \n    refs.todoListItems.append(li); \n    });\n};\n\nfunction addToLocalStorage(tasks) {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    renderTasks(tasks);\n};\n\nfunction getFromLocalStorage() {\n    const refs = localStorage.getItem('tasks');\n    if (refs) {\n        tasks = JSON.parse(refs);\n        renderTasks(tasks);\n    };\n};\n\ngetFromLocalStorage();\n\nfunction toggleOrDeleteTask(e) {\n    if (e.target.type === 'checkbox') {\n        toggle(e.target.parentElement.getAttribute('data-id'));\n    };\n    if (e.target.classList.contains('delete-button')) {\n        deleteTask(e.target.parentElement.getAttribute('data-id'))\n    };\n};\n\nfunction toggle(id) {\n\n    tasks.forEach(item => {\n        if (id === item.id) {\n            item.done = !item.done;\n        };\n    });\n    addToLocalStorage(tasks);\n};\n\nfunction deleteTask(id) {\n    tasks = tasks.filter(item => {\n        // return item.id != id;\n        if (item.id !== id) {\n            return item.id;\n        };\n    })\n    addToLocalStorage(tasks);\n};"],"names":["$8069ef7e6126e429$export$ac4959f4f1338dfc","size","arguments","length","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$e673c6f889677708$var$refs","todoForm","document","querySelector","todoInput","todoListItems","addEventListener","e","preventDefault","item","task","value","done","$e673c6f889677708$var$tasks","push","$e673c6f889677708$var$addToLocalStorage","$e673c6f889677708$var$addTodo","target","type","parentElement","getAttribute","forEach","classList","contains","filter","$e673c6f889677708$var$deleteTask","refs1","$e673c6f889677708$var$renderTasks","tasks1","innerHTML","checked","li","createElement","setAttribute","add","concat","append","tasks2","localStorage","setItem","JSON","stringify","getItem","parse"],"version":3,"file":"todolist2.f99c3d0e.js.map"}