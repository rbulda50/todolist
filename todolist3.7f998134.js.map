{"mappings":"AACO,IAkBIA,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC7BkBG,SAASC,cAAc,UAE/BC,UAAY,kZAa3B,MAAMC,EAAO,CACTC,SAAUJ,SAASC,cAAc,cACjCI,UAAWL,SAASC,cAAc,kBAClCK,cAAeN,SAASC,cAAc,mBACtCM,YAAaP,SAASC,cAAc,iBACpCO,SAAUR,SAASC,cAAc,eAGrCE,EAAKC,SAASK,iBAAiB,UAK/B,SAAsBC,GAClBA,EAAEC,iBAKN,SAAiBC,GACb,GAAIA,EAAO,CACP,MAAMC,EAAO,CAAEjB,GAAIN,IAAUsB,MAAOA,EAAOE,MAAM,GACjDC,EAAMC,KAAKH,GACXI,EAAkBF,E,EARtBG,CAAQf,EAAKE,UAAUO,MAAMO,QAC7BhB,EAAKE,UAAUO,MAAQ,E,IAP3BT,EAAKG,cAAcG,iBAAiB,SA4DpC,SAA8BC,GAC1B,MAAMU,EAAUV,EAAEW,OAAOC,QAAQ,wBAE7BF,IACgC,WAA5BV,EAAEW,OAAOE,QAAQC,SAWT5B,EAVGwB,EAAQG,QAAQ3B,GAoB/B6B,EATUV,EAAMW,KAAKb,GACjBA,EAAKjB,KAAOA,EACL,IACAiB,EACHC,MAAOD,EAAKC,MAGbD,MAdyB,WAA5BH,EAAEW,OAAOE,QAAQC,QAmB7B,SAAoB5B,GAIhB6B,EAHcV,EAAMY,QAAOC,GAChBA,EAAKhC,KAAOA,I,CApBfiC,CAAWT,EAAQG,QAAQ3B,KAKvC,IAAoBA,C,IAzEpB,IAAImB,EAAQ,GAgBZ,SAASE,EAAkBa,GACvBC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,IAC7CK,G,CAGJ,SAASC,IACL,MAAMC,EAAYN,aAAaO,QAAQ,SACnCD,IACAtB,EAAQkB,KAAKM,MAAMF,GACnBF,I,CAKR,SAASA,IACL,MAAMG,EAAU,EAAC1C,GAAEA,EAAEgB,MAAEA,EAAKE,KAAEA,KACtB,yCAC0BlB,iBAAkBkB,8CAChBF,kNAKnB,oBAAmBE,EAAO,6BAA+B,sHAMhE0B,EAAYzB,EAAMY,QAAO,EAACb,KAAEA,MAAYA,IACxC2B,EAAY1B,EAAMY,QAAO,EAACb,KAAEA,KAAWA,IAE7CX,EAAKI,YAAYL,UAAYsC,EAAUd,IAAIY,GAASI,KAAK,IACzDvC,EAAKK,SAASN,UAAYuC,EAAUf,IAAIY,GAASI,KAAK,G,CAG9D,SAASjB,EAAYkB,GAEjB1B,EAAkB0B,GAClBP,G,CA3BJA","sources":["node_modules/nanoid/index.browser.js","src/js/todolist3.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from \"nanoid\";\n\n\nconst tasksContainer = document.querySelector('.tasks');\n\ntasksContainer.innerHTML = `\n    <form class=\"todo-list\">\n    <header class=\"header\">\n        <input class=\"header__input\" type=\"text\" placeholder=\"Enter an activity..\">\n        <button type=\"submit\" class=\"header__button\"><i class=\"fa fa-plus\"></i></button>\n    </header>\n    <main class=\"list-container\">\n        <ul class=\"list current-list\"></ul>\n        <ul class=\"list done-list\"></ul>\n    </main>\n    </form>\n`\n\nconst refs = {\n    todoForm: document.querySelector('.todo-list'),\n    inputForm: document.querySelector('.header__input'),\n    listContainer: document.querySelector('.list-container'),\n    currentList: document.querySelector('.current-list'),\n    doneList: document.querySelector('.done-list'),\n}\n\nrefs.todoForm.addEventListener('submit', onFormSubmit);\nrefs.listContainer.addEventListener('click', taskContainerOnClick);\n\nlet tasks = [];\n\nfunction onFormSubmit(e) {\n    e.preventDefault();\n    addTodo(refs.inputForm.value.trim());\n    refs.inputForm.value = '';\n};\n\nfunction addTodo(value) {\n    if (value) {\n        const task = { id: nanoid(), value: value, done: false };\n        tasks.push(task);\n        addToLocalStorage(tasks);\n    };\n};\n\nfunction addToLocalStorage(tasks) {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n    renderTasks(tasks);\n};\n\nfunction getFromLocalStorage() {\n    const tasksRefs = localStorage.getItem('tasks');\n    if (tasksRefs) {\n        tasks = JSON.parse(tasksRefs);\n        renderTasks(tasks);\n    };\n};\ngetFromLocalStorage();\n\nfunction renderTasks() {\n    const getItem = ({ id, value, done }) => \n            `\n    <li class=\"list__item\" data-id=\"${id}\" data-done=\"${done}\">\n        <span class=\"list__item-name\">${value}</span>\n        <div class=\"list__buttons\">\n          <i class=\"list__button remove fa fa-trash-o\" data-action=\"remove\"></i>\n          <span class=\"list__bar\">|</span>\n          <i \n            class=\"${`list__button fa ${done ? 'uncomplete fa-check-circle' : 'complete fa-check-circle-o'}`}\"\n            data-action=\"toggle\"\n          ></i>\n        </div>\n     </li>\n    `\n        const todoTasks = tasks.filter(({ done }) => !done);\n        const doneTasks = tasks.filter(({ done }) => done);\n\n        refs.currentList.innerHTML = todoTasks.map(getItem).join('');\n        refs.doneList.innerHTML = doneTasks.map(getItem).join('');\n};\n\nfunction updateTasks(tasks) {\n    tasks = tasks;\n    addToLocalStorage(tasks);\n    getFromLocalStorage();\n};\n\nfunction taskContainerOnClick(e) {\n    const taskRef = e.target.closest('.list__item[data-id]');\n    // console.log(taskRef);\n    if (taskRef) {\n        if (e.target.dataset.action === \"toggle\") {\n            toggleTask(taskRef.dataset.id);\n            // console.log(taskRef.dataset.id);\n        };\n\n        if (e.target.dataset.action === 'remove') {\n            removeTask(taskRef.dataset.id);\n        };\n    };\n}\n\nfunction toggleTask(id) {\n    const items = tasks.map((task) => {\n        if (task.id === id) {\n            return {\n                ...task,\n                done: !task.done,\n            }\n        };\n        return task;\n    });\n        updateTasks(items);\n};\n\nfunction removeTask(id) {\n    const items = tasks.filter(item => {\n        return item.id !== id;\n    })\n    updateTasks(items);\n}"],"names":["$cf399e049a9c4d34$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","document","querySelector","innerHTML","$ac5843087376e2e6$var$refs","todoForm","inputForm","listContainer","currentList","doneList","addEventListener","e","preventDefault","value","task","done","$ac5843087376e2e6$var$tasks","push","$ac5843087376e2e6$var$addToLocalStorage","$ac5843087376e2e6$var$addTodo","trim","taskRef","target","closest","dataset","action","$ac5843087376e2e6$var$updateTasks","map","filter","item","$ac5843087376e2e6$var$removeTask","tasks1","localStorage","setItem","JSON","stringify","$ac5843087376e2e6$var$renderTasks","$ac5843087376e2e6$var$getFromLocalStorage","tasksRefs","getItem","parse","todoTasks","doneTasks","join","tasks2"],"version":3,"file":"todolist3.7f998134.js.map"}